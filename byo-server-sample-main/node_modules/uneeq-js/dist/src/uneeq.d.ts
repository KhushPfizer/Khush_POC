import { BehaviorSubject } from 'rxjs';
import { UneeqOptions } from './types/types';
import { VoiceInputMode } from './types/VoiceInputMode';
export declare class Uneeq {
    /**
     * The active session id as a string. If the session has not started yet value will be null
     */
    get sessionId(): string | null;
    static onDataMessage: (msg: any) => void;
    static onStatMessage: (stats: any) => void;
    ready: BehaviorSubject<boolean>;
    version: string;
    private messages;
    private internalMessages$;
    private session;
    private dhVideoPlayManager;
    private api;
    private messaging;
    private sessionPaused;
    private sessionStarted;
    private deviceManager;
    private messageHandler;
    private voiceInputManager;
    private unavailableAvatarMsgSent;
    private speechHandler;
    private readonly options;
    private readonly messageCallback;
    private readonly startSessionData;
    private metricsService;
    private sessionJwt;
    private startSessionTime;
    private availableResponseTime;
    private streamManager;
    private digitalHumanVideoElement;
    private sessionWasResumed;
    private uneeqLocalStorage;
    private chatMetadata;
    constructor(options: UneeqOptions);
    setLoggerEnabled(enabled: boolean): void;
    /**
     * Initialise the session. ReadyMessage will be sent when init is ready.
     */
    init(): void;
    /**
     * Initialise the session. ReadyMessage will be sent when init is ready. initWithToken
     * should be used instead of init() when a third party conversation service is used.
     */
    initWithToken(tokenId: string): Promise<void>;
    /**
     * Set a preferred camera to use in a live session. On success, SetCameraSuccessMessage
     * will be sent. DeviceNotFoundErrorMessage will be sent when the requested device is not found.
     * @param deviceId
     */
    setCamera(deviceId: string): void;
    /**
     * Set a preferred microphone to use in a live session. On success, SetMicSuccessMessage
     * will be sent. DeviceNotFoundErrorMessage will be sent when the requested device is not found.
     * @param deviceId
     */
    setMic(deviceId: string): void;
    /**
     * Set a preferred speaker to use in a live session. On success, SetSpeakerSuccessMessage
     * will be sent. DeviceNotFoundErrorMessage will be sent when the requested device is not found.
     * @param deviceId
     */
    setSpeaker(deviceId: string): void;
    /**
     * Set the microphone input mode to be used.
     * @param mode PUSH_TO_TALK or VOICE_ACTIVITY
     */
    setVoiceInputMode(mode: VoiceInputMode): void;
    /**
     * Enable or disable the users microphone
     * @param enable Defaults to true
     */
    enableMicrophone(enable?: boolean): void;
    /**
     * Enable or disable the users camera
     * @param enable Defaults to true
     */
    enableCamera(enable?: boolean): void;
    /**
     * Enable or disable the users microphone and camera
     * @param enable Defaults to true
     */
    enableMicrophoneAndCamera(enable?: boolean): void;
    /**
     * Set the custom field in chat metadata to a string value that will be sent
     * to BYO NLPs with all chat calls like playWelcomeMessage and sendTranscript requests.
     *
     * @param customMetadata
     */
    setCustomChatMetadata(customMetadata: string): void;
    /**
     * Send a text based message to the avatar.
     * @param text
     */
    sendTranscript(text: string): void;
    getServerStats(): void;
    /**
     * Start Recording voice audio through microphone. Call this method before using voice to speak to avatar.
     * stopRecording should be called when finished speaking.
     */
    startRecording(): void;
    /**
     * Stop Recording voice audio through microphone. Call this method after startRecording has been called.
     */
    stopRecording(): void;
    /**
     * Stop the avatar from speaking. This will stop avatar speaking even if interrupts are turned off.
     * When successful a corresponding AvatarRequestCompleted should be received.
     */
    stopSpeaking(): Promise<void>;
    /**
     * Pause speech recognition. The users speech will not be processed, or sent off their device.
     * This is the equivilent of muting the users microphone.
     */
    pauseSpeechRecognition(): boolean;
    /**
     * Resume speech recognition. The users speech will being being processed again.
     * This is the equivilent of unmuting the users microphone.
     */
    resumeSpeechRecognition(): boolean;
    /**
     * Pauses a live session. Local video and audio will stop being sent and remote avatar video audio will be stopped.
     * On success, SessionPausedMessage will be sent.
     */
    pauseSession(): boolean;
    /**
     * Resumes a live session. Local video and audio will start being sent again and remote avatar video audio will be
     * restarted. On success, SessionResumedMessage will be sent.
     */
    resumeSession(): boolean;
    /**
     * Ends the session, releases the microphone and camera and ends the avatar process. On success,
     * SessionEndedMessage will be sent. On error, ErrorEndingSessionMessage will be sent.
     */
    endSession(): void;
    /**
     * Show Avatar Debugging
     * @param enabled
     */
    setAvatarDebug(enabled: boolean): Promise<any>;
    /**
     * Trigger this conversation's welcome message
     */
    playWelcomeMessage(): Promise<void>;
    unmuteDigitalHuman(): void;
    private initDigitalHumanVideoElement;
    private gatherWebRtcMetrics;
    /**
     * Initializes the real time messaging service. On ready, ReadyMessage will be sent.
     */
    private initMessaging;
    private initDeviceManager;
    private sessionLiveHandler;
    private initAvatar;
    private startAvatarWhenAvailable;
    /**
     * Initialize the session. Starts avatar process on server and initializes messaging.
     */
    private initialize;
    /**
     * Sends a service unavailable message to the client. On success, ServiceUnavailableMessage will be sent.
     */
    private sendServiceUnavailableMessage;
    private serviceReadyCheck;
    private checkWebRTCSupport;
    /**
     * Initialise online status update messages
     */
    private initOnlineStatusUpdateMessages;
    private initPromMetricsListener;
    /**
     * Check if resume session functionality is available (localStorage is available)
     * Warn implementer if unavailable
     */
    private checkIfResumeSessionIsAvailable;
    private initChatMetadata;
}
