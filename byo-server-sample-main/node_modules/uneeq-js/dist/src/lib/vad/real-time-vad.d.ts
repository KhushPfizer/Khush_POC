/**
 * This VAD module is a fork from the following project:
 * https://github.com/ricky0123/vad/tree/master/packages/web
 *
 * It has been modified to only include what is required for our
 * own VAD implementation.
 *
 * This module is a wrapper to bring the following ML Model into
 * JS: https://github.com/snakers4/silero-vad
 */
import { FrameProcessor, FrameProcessorOptions } from './frame-processor';
import { SpeechProbabilities } from './models';
interface RealTimeVADCallbacks {
    /** Callback to run after each frame. The size (number of samples) of a frame is given by `frameSamples`. */
    onFrameProcessed: (probabilities: SpeechProbabilities) => any;
    /** Callback to run if speech start was detected but `onSpeechEnd` will not be run because the
     * audio segment is smaller than `minSpeechFrames`.
     */
    onVADMisfire: () => any;
    /** Callback to run when speech start is detected */
    onSpeechStart: () => any;
    /**
     * Callback to run when speech end is detected.
     * Takes as arg a Float32Array of audio samples between -1 and 1, sample rate 16000.
     * This will not run if the audio segment is smaller than `minSpeechFrames`.
     */
    onSpeechEnd: (audio: Float32Array) => any;
}
interface RealTimeVADOptionsWithStream extends FrameProcessorOptions, RealTimeVADCallbacks {
    stream: MediaStream;
    assetBasePath: string;
}
export type RealTimeVADOptions = RealTimeVADOptionsWithStream;
export declare const defaultRealTimeVADOptions: RealTimeVADOptions;
export declare class MicVAD {
    options: RealTimeVADOptions;
    static new(options?: Partial<RealTimeVADOptions>): Promise<MicVAD>;
    audioContext: AudioContext;
    stream: MediaStream;
    audioNodeVAD: AudioNodeVAD;
    listening: boolean;
    constructor(options: RealTimeVADOptions);
    init: () => Promise<void>;
    pause: () => void;
    start: () => void;
}
export declare class AudioNodeVAD {
    ctx: AudioContext;
    options: RealTimeVADOptions;
    static new(ctx: AudioContext, options?: Partial<RealTimeVADOptions>): Promise<AudioNodeVAD>;
    frameProcessor: FrameProcessor;
    entryNode: AudioNode;
    constructor(ctx: AudioContext, options: RealTimeVADOptions);
    pause: () => void;
    start: () => void;
    receive: (node: AudioNode) => void;
    processFrame: (frame: Float32Array) => Promise<void>;
    init: () => Promise<void>;
    modelFetcher: () => Promise<ArrayBuffer>;
}
export {};
