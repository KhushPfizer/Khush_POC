import { Subject } from 'rxjs';
import { NewSessionResponse } from '../types/NewSessionResponse';
import { UneeqOptions } from '../types/types';
import { API } from './api';
import { MediaHandler } from './media-handler';
import { MessagingService } from './messaging';
import { StreamManager } from './stream-manager';
import { VoiceInputManager } from './voice-input-manager';
export interface DeviceManagerOptions {
    userMessages: Subject<any>;
    session: NewSessionResponse;
    messages: Subject<any>;
    internalMessages$: Subject<any>;
    messaging: MessagingService;
    uneeqOptions: UneeqOptions;
    sessionLiveHandler?: () => void;
    streamManager: StreamManager;
    voiceInputManager: VoiceInputManager;
    digitalHumanVideoElement: HTMLVideoElement;
}
export declare class DeviceManager {
    options: DeviceManagerOptions;
    api: API;
    set edgeNodeId(edgeNodeId: string);
    mediaHandler: MediaHandler;
    private speakerConstraints;
    private audioConstraints;
    private videoConstraints;
    private userMediaConstraints;
    private publishStream;
    private devices;
    private previousMediaOptions;
    constructor(options: DeviceManagerOptions, api: API);
    enableLocalDevices(sendLocalVideo: boolean, sendLocalAudio: boolean): void;
    getDevices(publish?: boolean): void;
    setMicDevice(deviceId: string, getDevices?: boolean): void;
    setCamDevice(deviceId: string, getDevices?: boolean): void;
    setAvatarSpeakerDevice(deviceId: string): void;
    private revertMediaOptions;
    private initMediaConstraints;
    private initStreamWithoutDevices;
    private remoteVideoReady;
    private sendMediaUnavailableInfo;
    private getMediaDevices;
    private initDeviceList;
}
