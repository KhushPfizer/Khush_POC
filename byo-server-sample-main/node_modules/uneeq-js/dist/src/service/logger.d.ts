interface LoggerInterface {
    debug(primaryMessage: string, ...supportingData: any[]): void;
    warn(primaryMessage: string, ...supportingData: any[]): void;
    error(primaryMessage: string, ...supportingData: any[]): void;
    log(primaryMessage: string, ...supportingData: any[]): void;
}
export declare enum LogType {
    debug = "debug",
    log = "log",
    warn = "warn",
    error = "error"
}
export declare class Logger implements LoggerInterface {
    enabled: boolean;
    constructor();
    log(msg: string, ...supportingDetails: any[]): void;
    warn(msg: string, ...supportingDetails: any[]): void;
    error(msg: string, ...supportingDetails: any[]): void;
    debug(msg: string, ...supportingDetails: any[]): void;
    private emitLogMessage;
}
export declare const logger: Logger;
export {};
