import { Counter } from 'promjs/counter';
import { Histogram } from 'promjs/histogram';
import { Registry } from 'promjs/registry';
export declare enum PromMessageType {
    SessionStart = 0,
    WebRtcPerformance = 1,
    AvailabilityCheck = 2,
    QuestionMessageReceived = 3,
    AnswerMessageReceived = 4,
    SessionEnded = 5
}
export interface PromMessage {
    type: PromMessageType;
    labels?: any;
    value?: any;
}
export declare class Prom {
    private apiUrl;
    prom_prefix: string;
    registry: Registry;
    messageTimings: any;
    metricsPushedCounter: Counter;
    sessionStartTime: Histogram;
    availabilityCheckTime: Histogram;
    webRtcInboundRTT: Histogram;
    webRtcInboundFramesPerSec: Histogram;
    webRtcInboundPacketsLost: Histogram;
    webRtcFramesDropped: Histogram;
    webRtcFrameHeight: Histogram;
    webRtcFrameWidth: Histogram;
    conversationRoundTripTime: Histogram;
    private metricsIntervalId;
    constructor(apiUrl: string);
    handleMessage(msg: PromMessage): void;
    calculateConversationRtt(msg: PromMessage): number;
    sendMetrics(): void;
    private stopSendingMetrics;
}
