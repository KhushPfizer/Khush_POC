import { ChatMetadata } from '../types/ChatMetadata';
import { SpeechHandlerOptions } from '../types/SpeechHandlerOptions';
export declare class SpeechHandler {
    options: SpeechHandlerOptions;
    private ws;
    private mediaRecorder;
    private logPrefix;
    private speechBuffer;
    private micVad;
    private recordingLive;
    private headerBlob;
    private scriptsLoadedPromise;
    private digitalHumanSpeaking;
    private stream?;
    private reconnectWs;
    private wsReconnectMessageQueue;
    private storedTranscription?;
    private awaitingFinalTranscript;
    private interruptionBlocked;
    constructor(options: SpeechHandlerOptions);
    startRecognition(): void;
    stopRecognition(): void;
    pause(): boolean;
    resume(): boolean;
    setChatMetadata(chatMetadata: ChatMetadata): void;
    pauseVadIfInterruptNotAllowed(): void;
    private loadScript;
    private loadScripts;
    private handleAppMessages;
    private handleSpeakingEnd;
    private initWebsocket;
    private sendWebsocketMessageQueue;
    private loadSavedAudioHeaders;
    private initVoiceActivityDetection;
    private startMicVad;
    private pauseMicVad;
    private onVadSpeechStart;
    private onVadSpeechEnd;
    private sendStoredTranscriptionIfReady;
    private handleWebsocketMessage;
    private handleWebsocketClose;
    private sendStartMessage;
    private sendStopMessage;
    private wsSend;
    private handleWsReconnectQueueOverflow;
    private initMicrophone;
    private getMediaRecorder;
    private initMediaRecorder;
    private mediaRecorderOnData;
    private handlePttTranscriptionResult;
    private handleVadTranscriptionResult;
    private sendChatPrompt;
}
