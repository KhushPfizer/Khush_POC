export declare class RingBuffer<T> {
    /**
     * Create a new ring buffer from an array.
     * @param data Array to import.
     * @param size Optional size. Otherwise same size as the input data array.
     */
    static fromArray<T>(data: T[], size?: number): RingBuffer<T>;
    protected buffer: T[];
    protected size: number;
    protected pos: number;
    /**
     * Creates a new ring buffer.
     * @param size Maximum size of the circular buffer.
     */
    constructor(size: number);
    /**
     * Returns the maximum size.
     */
    getSize(): number;
    /**
     * Returns the next internal index position.
     */
    getPos(): number;
    /**
     * Returns the current buffer size.
     * The underlying array length.
     */
    getBufferLength(): number;
    /**
     * Pushes new items to this buffer. (like Array#push)
     * @param items Items to push to this buffer.
     */
    add(...items: T[]): void;
    /**
     * Returns the item on specific index.
     * @param index Index of item.
     */
    get(index: number): T | undefined;
    /**
     * Returns the first item.
     * Same as #get(0).
     */
    getFirst(): T | undefined;
    /**
     * Returns the last item.
     * Same as #get(-1) or #get(length - 1).
     */
    getLast(): T | undefined;
    /**
     * Return the first `n` items as an array.
     * @param n Number of items to return.
     */
    getFirstN(n: number): T[];
    /**
     * Return the last `n` items as an array.
     * @param n Number of items to return.
     */
    getLastN(n: number): T[];
    /**
     * Removes one or more items form the buffer.
     * @param index Start index of the item to remove.
     * @param count The count of items to remove. (default: 1)
     */
    remove(index: number, count?: number): T[];
    /**
     * Removes the first item. Like #remove(0).
     */
    removeFirst(): T;
    /**
     * Removes the last item. Like #remove(-1).
     */
    removeLast(): T;
    /**
     * Converts the ring buffer to a JavaScript standard array.
     */
    toArray(): T[];
    /**
     * Imports an array to this buffer. (overwrites)
     * @param data JavaScript standard array.
     * @param resize If true, sets the maximum size to the input data array length.
     */
    fromArray(data: T[], resize?: boolean): void;
    /**
     * Clears the the buffer. Removes all items.
     */
    clear(): void;
    /**
     * Resizes the circular buffer.
     * @param newSize The new maximum size.
     */
    resize(newSize: number): void;
    /**
     * Returns true if the maximum size is reached.
     */
    isFull(): boolean;
    /**
     * Returns true if the buffer is empty.
     */
    isEmpty(): boolean;
}
